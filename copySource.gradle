// http://mrhaki.blogspot.com/2010/10/gradle-goodness-copy-files-with.html

// uses imported ant filter classes in each task to replace placeholders in source documents
//import org.apache.tools.ant.filters.*

defaultTasks 'groovyall', 'groovy', 'updateGradle'

task groovycopy(type: Copy) {
    from 'main'
    into  file("../src/main/groovy${packagefolder}")
    include 'Skeleton.groovy'

    // Substitute property tokens in files
    expand([year: year, alias:alias, classname: classname, packagename:packagename, 
    projectname:projectname, packagefolder:packagefolder, packageid:packageid, author:author])
    //filter(ReplaceTokens, tokens: [year: year, classname: classname, package:packagename])

    rename { it = classname + '.groovy' }
    outputs.upToDateWhen { false }
} // end of task

// this just creates the 'Test' versions while the groovycopy task above actually copies the *.groovy from the 'main' folder
task groovy(type: Copy,dependsOn: groovycopy) {
    from 'test'
    into  file("../src/test/groovy${packagefolder}")
    include '*.groovy'

    // Substitute property tokens in files
    expand([year: year, alias:alias, classname: classname, packagename:packagename, 
    projectname:projectname, packagefolder:packagefolder, packageid:packageid, author:author])
    //filter(ReplaceTokens, tokens: [year: year, classname: classname, package:packagename])

    rename { it = classname + 'Test.groovy' }
    outputs.upToDateWhen { false }
} // end of task


// here we copy all groovy source except our own Skeleton.groovy we use internally
// so just name your class like Hammer.groovy then, if needed, use groovy GString template placeholders like ${date} within your source
task groovyall(type: Copy) {
    from 'main'
    into  file("../src/main/groovy${packagefolder}")
    include '*.groovy'
    exclude 'Skeleton.groovy'
    
    // Substitute property tokens in files
    expand([year: year, alias:alias, classname: classname, packagename:packagename, 
    projectname:projectname, packagefolder:packagefolder, packageid:packageid, author:author])
    //filter(ReplaceTokens, tokens: [year: year, classname: classname, package:packagename])
    
    outputs.upToDateWhen { false }
} // end of task


task testGradleProperties (type: Copy,dependsOn: groovyall) {
    from 'test'
    into  file("../src/test/groovy${packagefolder}")
    include 'PropertiesTest.groovy'
    
    // Substitute property tokens in files
    expand([year: year, alias:alias, classname: classname, packagename:packagename, 
    projectname:projectname, packagefolder:packagefolder, packageid:packageid, author:author])
} // end of task


// ==============================================
// Java anyone ?
task javacopy(type: Copy) {
    from 'main'
    into  file("../src/main/java${packagefolder}")
    include '*.java'
    
    // Substitute property tokens in files
    expand([year: year, alias:alias, classname: classname, packagename:packagename, 
    projectname:projectname, packagefolder:packagefolder, packageid:packageid, author:author])
    //filter(ReplaceTokens, tokens: [year: year, classname: classname, package:packagename ])
    
    rename { it = classname + '.java' }
    outputs.upToDateWhen { false }
} // end of task


// funny tasks name but looks nice for command line user b/c it calls javacopy task to make java source & dirs
task java(type: Copy,dependsOn: javacopy) {
    from 'test'
    into  file("../src/test/java${packagefolder}")
    include '*.java'

    // Substitute property tokens in files
    expand([year: year, alias:alias, classname: classname, packagename:packagename, 
    projectname:projectname, packagefolder:packagefolder, packageid:packageid, author:author])
    //filter(ReplaceTokens, tokens: [year: year, classname: classname, package:packagename])
    
    rename { it = classname + 'Test.java' }
    outputs.upToDateWhen { false }
} // end of task


// ==============================================
// Scala anyone ?
task scalacopy(type: Copy) {
    from 'main'
    into  file("../src/main/scala${packagefolder}")
    include '*.scala'
    
    // Substitute property tokens in files
    expand([year: year, alias:alias, classname: classname, packagename:packagename, 
    projectname:projectname, packagefolder:packagefolder, packageid:packageid, author:author])
    //filter(ReplaceTokens, tokens: [year: year, classname: classname, package:packagename])

    rename { it = classname + '.scala' }
    outputs.upToDateWhen { false }
} // end of task

// funny tasks name but looks nice for command line user b/c it calls scalacopy task to make scala source & dirs
task scala(type: Copy,dependsOn: scalacopy) {
    from 'test'
    into  file("../src/test/scala${packagefolder}")
    include '*.scala'

    // Substitute property tokens in files
    expand([year: year, alias:alias, classname: classname, packagename:packagename, 
    projectname:projectname, packagefolder:packagefolder, packageid:packageid, author:author])
    //filter(ReplaceTokens, tokens: [year: year, classname: classname, package:packagename])
    
    rename { it = classname + 'Test.scala' }
    outputs.upToDateWhen { false }
} // end of task


/*
	A Task to update the build.gradle file of the root project with a run task for a newly created class
*/
task updateGradle{
    // initialization stuff 
    doLast {
		   println "doing a lot of stuff" 
		   def fi = file("${projectDir}/../build.gradle")
		   fi.append("""

// runs the class main() method; args are ignored but maybe later ?
task(run${classname}, dependsOn: 'classes', type: JavaExec) {
		main = "${packageid}${classname}"
		classpath = sourceSets.main.runtimeClasspath
		args 'jimbo', 'hi kids'
		systemProperty 'simple.message', 'Hi kids '
}

""");
		   println "end of myTask" 
    }
} // end of task

