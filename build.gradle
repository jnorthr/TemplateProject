/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy project to get you started.
 * For more details take a look at the Groovy Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/tutorial_groovy_projects.html
 */

apply plugin: 'groovy'

defaultTasks 'clean', 'build', 'core', 'docs', 'all', 'one', 'single', 'wrapper'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Use the latest Groovy version for building this library
    compile 'org.codehaus.groovy:groovy-all:2.4.12'

    // Use the awesome Spock testing and specification framework
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'junit:junit:4.12'
    testCompile 'org.springframework.boot:spring-boot:1.2.1.RELEASE'
    testCompile "org.scala-lang:scala-library:2.11.1"
    testCompile group: 'org.scalatest', name: 'scalatest_2.12', version: '3.0.3'    
}



// runs the class main() method; args are ignored but maybe later ?
task(runDialog, dependsOn: 'classes', type: JavaExec) {
		main = "com.jim.toolkit.tools.Dialog"
		classpath = sourceSets.main.runtimeClasspath
		args 'jimbo', 'hi kids'
		systemProperty 'simple.message', 'Hi kids '
}



// runs the class main() method; args are ignored but maybe later ?
task(runProjectProperties, dependsOn: 'classes', type: JavaExec) {
		main = "com.jim.toolkit.tools.ProjectProperties"
		classpath = sourceSets.main.runtimeClasspath
		args 'jimbo', 'hi kids'
		systemProperty 'simple.message', 'Hi kids '
}

task core(type: GradleBuild) {
    buildFile = 'copyCore.gradle'
    tasks = ['copy', 'resources']
}

task docs(type: GradleBuild) {
    buildFile = 'copyDocs.gradle'
    tasks = ['filterCopy', 'asciidoctor']
}

task all(type: GradleBuild) {
    buildFile = 'copyAllSource.gradle'
    tasks = ['groovy', 'java', 'scala']
}

// create one source module for each language for gradle.properties single class of ( classname: classname )
task one(type: GradleBuild) {
    buildFile = 'copySource.gradle'
    tasks = ['testGradleProperties', 'groovy', 'java', 'scala']
}

// create one source module for each language for gradle.properties single class of ( classname: classname )
task single(type: GradleBuild) {
    buildFile = 'copyMethod.gradle'
    tasks = ['setup', 'getGroovy', 'getScala', 'getJava']
}


// makes gradle wrapper one folder up - 
task wrapper(type: Wrapper) {
    jarFile = "${projectDir.getParent()}/gradle/wrapper/gradle-wrapper.jar"
    scriptFile = "${projectDir.getParent()}/gradlew"
}

